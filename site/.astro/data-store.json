[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.13.7","content-config-digest","262e19c900bdc416","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://jeffry.in\",\"compressHTML\":true,\"base\":\"/1ls\",\"trailingSlash\":\"never\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"staticImportMetaEnv\":false,\"chromeDevtoolsWorkspace\":false},\"legacy\":{\"collections\":false}}","docs",["Map",11,12,21,22,30,31,39,40],"api-reference",{"id":11,"data":13,"body":16,"filePath":17,"digest":18,"legacyId":19,"deferredRender":20},{"title":14,"description":15},"API Reference","Complete reference for 1ls CLI","1ls is a command-line tool for processing structured data with JavaScript.\n\n## CLI Usage\n\n### Basic Syntax\n\n```bash\n1ls [expression] [options]\n```\n\nThe expression is JavaScript code where `x` represents your input data.\n\n### Options\n\n#### `--help, -h`\nShow help information.\n\n```bash\n1ls --help\n```\n\n#### `--version, -v`\nShow version number.\n\n```bash\n1ls --version\n```\n\n#### `--minify, -m`\nOutput minified JSON (no whitespace).\n\n```bash\necho '{\"a\":1}' | 1ls --minify\n# Output: {\"a\":1}\n```\n\n#### `--raw, -r`\nOutput raw strings without quotes.\n\n```bash\necho '{\"name\":\"Alice\"}' | 1ls 'x.name' --raw\n# Output: Alice (instead of \"Alice\")\n```\n\n#### `--file, -f \u003Cpath>`\nRead input from a file instead of stdin.\n\n```bash\n1ls 'x.version' -f package.json\n```\n\n#### `--output, -o \u003Cpath>`\nWrite output to a file instead of stdout.\n\n```bash\necho '[1,2,3]' | 1ls 'x.map(n => n * 2)' -o result.json\n```\n\n#### `--type, -t \u003Cformat>`\nSpecify input format (auto-detected by default).\n\nSupported formats:\n- `json` - JSON data\n- `yaml` - YAML data\n- `toml` - TOML data\n- `csv` - CSV data\n- `tsv` - TSV data\n- `xml` - XML data\n- `ini` - INI configuration\n- `text` - Plain text (line array)\n\n```bash\n1ls 'x.database' -f config.yaml -t yaml\n```\n\n## Input Variable\n\n### The `x` Variable\n\nIn your JavaScript expression, `x` represents the parsed input data:\n\n```bash\n# JSON object\necho '{\"name\":\"Alice\"}' | 1ls 'x.name'\n\n# JSON array\necho '[1,2,3]' | 1ls 'x.length'\n\n# After parsing YAML\ncat config.yaml | 1ls 'x.server.port'\n\n# After parsing CSV (array of objects)\ncat data.csv | 1ls 'x[0]'\n```\n\n## Data Format Examples\n\n### JSON\n```bash\necho '{\"users\":[{\"name\":\"Alice\"},{\"name\":\"Bob\"}]}' | \\\n  1ls 'x.users.map(u => u.name)'\n```\n\n### YAML\n```yaml\n# config.yaml\ndatabase:\n  host: localhost\n  port: 5432\n```\n```bash\ncat config.yaml | 1ls 'x.database.host'\n```\n\n### CSV\n```csv\n# data.csv\nname,age,city\nAlice,30,NYC\nBob,25,LA\n```\n```bash\ncat data.csv | 1ls 'x.filter(r => r.age > 25)'\n```\n\n### TOML\n```toml\n# Cargo.toml\n[package]\nname = \"myapp\"\nversion = \"1.0.0\"\n```\n```bash\ncat Cargo.toml | 1ls 'x.package.name'\n```\n\n### XML\n```xml\n\u003C!-- data.xml -->\n\u003Croot>\n  \u003Cuser name=\"Alice\" age=\"30\"/>\n\u003C/root>\n```\n```bash\ncat data.xml | 1ls 'x.root.user[\"@name\"]'\n```\n\n### Plain Text\n```bash\n# Each line becomes an array element\ncat file.txt | 1ls 'x.filter(line => line.includes(\"error\"))'\n```\n\n## JavaScript Features\n\n### All ES6+ Features\n```bash\n# Arrow functions\necho '[1,2,3]' | 1ls 'x.map(n => n * 2)'\n\n# Destructuring\necho '[{\"a\":1,\"b\":2}]' | 1ls 'x.map(({a,b}) => a + b)'\n\n# Spread operator\necho '[[1,2],[3,4]]' | 1ls 'x.flat()'\n\n# Template literals\necho '{\"name\":\"Alice\"}' | 1ls '`Hello ${x.name}`'\n```\n\n### Built-in Objects\n```bash\n# Math\necho '[1,2,3]' | 1ls 'Math.max(...x)'\n\n# Date\necho '{}' | 1ls 'new Date().toISOString()'\n\n# Set\necho '[1,2,2,3]' | 1ls '[...new Set(x)]'\n\n# Map\necho '[[\"a\",1],[\"b\",2]]' | 1ls 'Object.fromEntries(new Map(x))'\n```\n\n## Output Format\n\nBy default, 1ls outputs formatted JSON:\n\n```bash\necho '{\"a\":1}' | 1ls\n# {\n#   \"a\": 1\n# }\n```\n\n### Pretty Print\nWhen no expression is given, 1ls pretty prints:\n\n```bash\necho '{\"a\":1,\"b\":2}' | 1ls\n```\n\n### Expression Results\nThe result of your expression is serialized to JSON:\n\n```bash\necho '[1,2,3]' | 1ls 'x.reduce((a,b) => a+b)'\n# 6\n\necho '{\"name\":\"Alice\"}' | 1ls 'x.name.toUpperCase()'\n# \"ALICE\"\n```\n\n## Error Handling\n\n1ls provides clear error messages:\n\n```bash\n# Syntax errors\necho '{}' | 1ls 'x..name'\n# Error: Unexpected token '.'\n\n# Runtime errors\necho '{}' | 1ls 'x.foo.bar'\n# Error: Cannot read property 'bar' of undefined\n\n# Parse errors\necho 'invalid json' | 1ls\n# Error: Invalid JSON input\n```\n\n## Shell Completion\n\nInstall tab completion for your shell:\n\n```bash\n# Automatic installation\n1ls --install-completions\n\n# Manual installation\n# Bash\necho 'source \u003C(1ls --completion bash)' >> ~/.bashrc\n\n# Zsh\necho 'source \u003C(1ls --completion zsh)' >> ~/.zshrc\n\n# Fish\n1ls --completion fish > ~/.config/fish/completions/1ls.fish\n```\n\n## Examples\n\n### Data Extraction\n```bash\n# Get all keys\necho '{\"a\":1,\"b\":2}' | 1ls 'Object.keys(x)'\n\n# Get all values\necho '{\"a\":1,\"b\":2}' | 1ls 'Object.values(x)'\n\n# Nested access\necho '{\"user\":{\"address\":{\"city\":\"NYC\"}}}' | 1ls 'x.user.address.city'\n```\n\n### Data Transformation\n```bash\n# Calculate average\necho '[10,20,30]' | 1ls 'x.reduce((a,b)=>a+b)/x.length'\n\n# Group by property\necho '[{\"type\":\"a\",\"val\":1},{\"type\":\"b\",\"val\":2}]' | \\\n  1ls 'x.reduce((g,i)=>({...g,[i.type]:i.val}),{})'\n\n# Flatten nested arrays\necho '[[1,2],[3,4]]' | 1ls 'x.flat()'\n```\n\n### Filtering and Searching\n```bash\n# Find items\necho '[{\"id\":1},{\"id\":2}]' | 1ls 'x.find(i => i.id === 2)'\n\n# Check existence\necho '[1,2,3]' | 1ls 'x.includes(2)'\n\n# Count occurrences\necho '[1,2,2,3,3,3]' | 1ls 'x.filter(n => n === 3).length'\n```","src/content/docs/api-reference.mdx","64c756716700c7ee","api-reference.mdx",true,"setup",{"id":21,"data":23,"body":26,"filePath":27,"digest":28,"legacyId":29,"deferredRender":20},{"title":24,"description":25},"Setup","Quick and easy setup guide for 1ls CLI","\u003Csection>\n\n## Installation\n\n### With npm\n```bash\nnpm install -g 1ls\n```\n\n### With Bun\n```bash\nbun add -g 1ls\n```\n\n### With Yarn\n```bash\nyarn global add 1ls\n```\n\n### With pnpm\n```bash\npnpm add -g 1ls\n```\n\n## Basic Usage\n\nOnce installed, you can start using 1ls immediately:\n\n```bash\n# Pretty print JSON\necho '{\"hello\":\"world\"}' | 1ls\n\n# Process a file\n1ls 'x.version' \u003C package.json\n\n# Use with curl\ncurl -s https://api.github.com/users/github | 1ls 'x.public_repos'\n```\n\n## Shell Completion\n\n1ls supports tab completion for bash, zsh, and fish shells:\n\n```bash\n# Install completions\n1ls --install-completions\n\n# Or manually source them\nsource \u003C(1ls --completion bash)  # for bash\nsource \u003C(1ls --completion zsh)   # for zsh\n```\n\n## Command Line Options\n\n```bash\n# Show help\n1ls --help\n\n# Show version\n1ls --version\n\n# Pretty print (default when no expression given)\necho '{\"a\":1}' | 1ls\n\n# Minify output\necho '{\"a\":1}' | 1ls --minify\n\n# Raw output (no quotes for strings)\necho '{\"name\":\"Alice\"}' | 1ls 'x.name' --raw\n```\n\n## Examples\n\n```bash\n# Extract a field\necho '{\"user\":{\"name\":\"Alice\"}}' | 1ls 'x.user.name'\n\n# Filter an array\necho '[1,2,3,4,5]' | 1ls 'x.filter(n => n > 3)'\n\n# Transform data\necho '[{\"price\":10},{\"price\":20}]' | 1ls 'x.map(i => i.price * 1.1)'\n\n# Read from file\n1ls 'Object.keys(x.scripts)' \u003C package.json\n\n# Process YAML\ncat config.yaml | 1ls 'x.database.port'\n\n# Process CSV\ncat data.csv | 1ls 'x.map(row => row.name)'\n```\n\n---\n\n\u003C/section>","src/content/docs/setup.mdx","c83aee78e2912bcf","setup.mdx","recipes",{"id":30,"data":32,"body":35,"filePath":36,"digest":37,"legacyId":38,"deferredRender":20},{"title":33,"description":34},"Recipes","Common 1ls usage patterns and examples","# Recipes\n\nCommon usage patterns and examples for 1ls.\n\n## Basic Operations\n\n### Pretty Print JSON\n```bash\necho '{\"name\":\"John\",\"age\":30}' | 1ls\n```\n\n### Extract a Field\n```bash\necho '{\"name\":\"John\",\"age\":30}' | 1ls 'x.name'\n```\n\n### Filter an Array\n```bash\necho '[1,2,3,4,5]' | 1ls 'x.filter(n => n > 2)'\n```\n\n## Transform Data\n\n### Map Over Array\n```bash\necho '[{\"name\":\"John\"},{\"name\":\"Jane\"}]' | 1ls 'x.map(p => p.name)'\n```\n\n### Calculate Sum\n```bash\necho '[1,2,3,4,5]' | 1ls 'x.reduce((a,b) => a+b, 0)'\n```\n\n### Group By Property\n```bash\necho '[{\"type\":\"a\",\"val\":1},{\"type\":\"b\",\"val\":2},{\"type\":\"a\",\"val\":3}]' | \\\n  1ls 'x.reduce((g,i) => ({...g,[i.type]:[...(g[i.type]||[]),i]}),{})'\n```\n\n## File Operations\n\n### Read and Transform JSON File\n```bash\n1ls 'x.users.filter(u => u.active)' \u003C data.json\n```\n\n### Convert JSON to CSV\n```bash\necho '[{\"name\":\"John\",\"age\":30},{\"name\":\"Jane\",\"age\":25}]' | \\\n  1ls 'x.map(r => Object.values(r).join(\",\")).join(\"\\n\")'\n```\n\n## Advanced Patterns\n\n### Flatten Nested Structure\n```bash\necho '{\"a\":{\"b\":{\"c\":1}}}' | 1ls 'JSON.stringify(x, null, 2)'\n```\n\n### Extract Unique Values\n```bash\necho '[1,2,2,3,3,3]' | 1ls '[...new Set(x)]'\n```\n\n### Sort Objects by Property\n```bash\necho '[{\"name\":\"c\"},{\"name\":\"a\"},{\"name\":\"b\"}]' | \\\n  1ls 'x.sort((a,b) => a.name.localeCompare(b.name))'\n```\n\n### Merge Objects\n```bash\necho '[{\"a\":1},{\"b\":2},{\"c\":3}]' | 1ls 'Object.assign({}, ...x)'\n```\n\n## Working with APIs\n\n### Parse Response Headers\n```bash\ncurl -I https://api.example.com | \\\n  1ls 'x.split(\"\\n\").filter(l => l).map(l => l.split(\": \"))'\n```\n\n### Extract Nested API Data\n```bash\ncurl https://api.github.com/users/username | \\\n  1ls 'x.public_repos'\n```\n\n## Debugging\n\n### Inspect Object Structure\n```bash\necho '{\"complex\":{\"nested\":{\"data\":true}}}' | \\\n  1ls 'Object.keys(x).map(k => ({key: k, type: typeof x[k]}))'\n```\n\n### Count Array Elements\n```bash\necho '[1,2,2,3,3,3]' | \\\n  1ls 'x.reduce((c,i) => ({...c,[i]:(c[i]||0)+1}),{})'\n```","src/content/docs/recipes.mdx","f94ea141d26625bb","recipes.mdx","introduction",{"id":39,"data":41,"body":44,"filePath":45,"digest":46,"legacyId":47,"deferredRender":20},{"title":42,"description":43},"Introduction to 1ls","1ls is a lightweight CLI tool for processing structured data with JavaScript","\u003Cdiv className=\"flex flex-wrap gap-2 mb-8\">\n  \u003Ca href=\"https://badge.fury.io/js/1ls\" target=\"_blank\" rel=\"noopener noreferrer\">\n    \u003Cimg src=\"https://badge.fury.io/js/1ls.svg\" alt=\"npm version\" />\n  \u003C/a>\n  \u003Ca href=\"https://github.com/yowainwright/1ls\" target=\"_blank\" rel=\"noopener noreferrer\">\n    \u003Cimg src=\"https://img.shields.io/github/stars/yowainwright/1ls?style=social\" alt=\"GitHub stars\" />\n  \u003C/a>\n  \u003Ca href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"noopener noreferrer\">\n    \u003Cimg src=\"https://img.shields.io/badge/TypeScript-Ready-blue\" alt=\"TypeScript Ready\" />\n  \u003C/a>\n  \u003Ca href=\"https://opensource.org/licenses/MIT\" target=\"_blank\" rel=\"noopener noreferrer\">\n    \u003Cimg src=\"https://img.shields.io/badge/License-MIT-yellow.svg\" alt=\"License: MIT\" />\n  \u003C/a>\n\u003C/div>\n\n## What is 1ls?\n\n1ls (pronounced \"one-less\") is a lightweight command-line tool that processes structured data using JavaScript syntax. It automatically detects and parses various file formats including JSON, YAML, TOML, CSV, and more - then lets you transform the data using familiar JavaScript.\n\n## Why Use 1ls?\n\n### The Problem\n\nWorking with different data formats on the command line often requires multiple tools:\n- `jq` for JSON\n- `yq` for YAML\n- `csvkit` for CSV\n- `tomlq` for TOML\n\nEach tool has its own syntax and quirks to learn.\n\n### The Solution\n\n1ls handles all common data formats with one tool and one syntax - JavaScript:\n\n```bash\n# JSON\necho '{\"name\":\"Alice\"}' | 1ls 'x.name'\n\n# YAML\ncat config.yaml | 1ls 'x.database.host'\n\n# TOML\ncat Cargo.toml | 1ls 'x.dependencies'\n\n# CSV\ncat data.csv | 1ls 'x.filter(row => row.age > 21)'\n\n# Package.json\n1ls 'x.scripts' \u003C package.json\n```\n\n## Supported Formats\n\n1ls automatically detects and parses:\n- **JSON** - JavaScript Object Notation\n- **YAML** - YAML Ain't Markup Language\n- **TOML** - Tom's Obvious, Minimal Language\n- **CSV** - Comma-Separated Values\n- **TSV** - Tab-Separated Values\n- **XML** - Extensible Markup Language\n- **INI** - Configuration files\n- **Plain text** - Line-by-line processing\n\n## Benefits\n\n- **Universal**: One tool for all data formats\n- **Familiar Syntax**: Just JavaScript, no new query language\n- **Auto-detection**: Automatically identifies file format\n- **Lightweight**: Minimal dependencies, fast execution\n- **Unix-friendly**: Works seamlessly with pipes\n- **Fast**: Built on Bun for optimal performance","src/content/docs/introduction.mdx","733bca1894ef4435","introduction.mdx"]